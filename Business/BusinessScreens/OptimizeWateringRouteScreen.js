// Business/BusinessScreens/OptimizeWateringRouteScreen.js
import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  Animated,
  SafeAreaView,
  StatusBar,
  Platform,
  Dimensions,
} from 'react-native';
import { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getOptimizedWateringRoute } from '../services/businessWateringApi';

const { width } = Dimensions.get('window');

export default function OptimizeWateringRouteScreen({ navigation, route }) {
  const { businessId: routeBusinessId } = route.params || {};
  
  // State management
  const [businessId, setBusinessId] = useState(routeBusinessId);
  const [isLoading, setIsLoading] = useState(true);
  const [routeData, setRouteData] = useState(null);
  const [error, setError] = useState(null);
  const [selectedRoute, setSelectedRoute] = useState(null);
  const [routeType, setRouteType] = useState('gps'); // 'gps' or 'location'
  
  // Animation refs
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(30)).current;
  const scaleAnim = useRef(new Animated.Value(0.9)).current;
  
  // Initialize
  useEffect(() => {
    const initialize = async () => {
      try {
        let id = businessId;
        if (!id) {
          id = await AsyncStorage.getItem('businessId');
          setBusinessId(id);
        }
        
        if (id) {
          await loadOptimizedRoute(id);
          startAnimation();
        }
      } catch (error) {
        console.error('Error initializing route screen:', error);
        setError('Failed to initialize route optimization');
      } finally {
        setIsLoading(false);
      }
    };
    
    initialize();
  }, [businessId]);
  
  // Start entrance animation
  const startAnimation = () => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 600,
        useNativeDriver: Platform.OS !== 'web',
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 500,
        useNativeDriver: Platform.OS !== 'web',
      }),
      Animated.spring(scaleAnim, {
        toValue: 1,
        tension: 100,
        friction: 8,
        useNativeDriver: Platform.OS !== 'web',
      }),
    ]).start();
  };
  
  // Load optimized route
  const loadOptimizedRoute = async (businessId) => {
    try {
      setIsLoading(true);
      setError(null);
      
      const data = await getOptimizedWateringRoute(businessId);
      setRouteData(data);
      
      if (data.route && data.route.length > 0) {
        setSelectedRoute(data.route);
        setRouteType(data.routeType || 'location');
      } else {
        setError('No plants need watering or location data is missing');
      }
    } catch (error) {
      console.error('Error loading optimized route:', error);
      setError('Could not generate optimized route');
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle refresh
  const handleRefresh = () => {
    if (businessId) {
      loadOptimizedRoute(businessId);
    }
  };
  
  // Start navigation
  const handleStartNavigation = () => {
    if (selectedRoute && selectedRoute.length > 0) {
      navigation.navigate('GPSWateringNavigator', {
        route: selectedRoute,
        businessId,
        onPlantWatered: (plantId) => {
          // Handle plant watered callback
          console.log('Plant watered:', plantId);
        }
      });
    } else {
      Alert.alert('No Route', 'Please generate a route first');
    }
  };
  
  // Share route
  const handleShareRoute = () => {
    if (!routeData || !routeData.route) return;
    
    const routeText = routeData.route.map((plant, index) => {
      const location = plant.location ? 
        [
          plant.location.section && `Section ${plant.location.section}`,
          plant.location.aisle && `Aisle ${plant.location.aisle}`,
          plant.location.shelfNumber && `Shelf ${plant.location.shelfNumber}`
        ].filter(Boolean).join(', ') : 
        'Location not specified';
      
      return `${index + 1}. ${plant.name}\n   📍 ${location}`;
    }).join('\n\n');
    
    const shareContent = `🌱 Optimized Watering Route\n\n${routeText}\n\n⏱️ Estimated time: ${routeData.estimatedTime?.formatted || 'Unknown'}\n📱 Generated by Greener Business App`;
    
    Alert.alert(
      'Share Route',
      shareContent,
      [
        { text: 'Close', style: 'cancel' },
        { 
          text: 'Copy to Clipboard', 
          onPress: () => {
            // Copy to clipboard logic here
            Alert.alert('Copied', 'Route copied to clipboard');
          }
        }
      ]
    );
  };
  
  // Render loading state
  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#4CAF50" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4CAF50" />
          <Text style={styles.loadingText}>Optimizing watering route...</Text>
          <Text style={styles.loadingSubtext}>Finding the most efficient path</Text>
        </View>
      </SafeAreaView>
    );
  }
  
  // Render error state
  if (error) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#4CAF50" />
        <View style={styles.errorContainer}>
          <MaterialIcons name="error-outline" size={64} color="#f44336" />
          <Text style={styles.errorTitle}>Route Optimization Failed</Text>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={handleRefresh}>
            <MaterialIcons name="refresh" size={20} color="#fff" />
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#4CAF50" />
      
      {/* Header */}
      <Animated.View 
        style={[
          styles.header,
          { opacity: fadeAnim }
        ]}
      >
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <MaterialIcons name="arrow-back" size={24} color="#fff" />
        </TouchableOpacity>
        
        <View style={styles.headerContent}>
          <Text style={styles.headerTitle}>Optimized Route</Text>
          <Text style={styles.headerSubtitle}>
            {routeData?.totalPlants || 0} plants • {routeData?.estimatedTime?.formatted || '0 min'}
          </Text>
        </View>
        
        <TouchableOpacity 
          style={styles.shareButton}
          onPress={handleShareRoute}
        >
          <MaterialIcons name="share" size={24} color="#fff" />
        </TouchableOpacity>
      </Animated.View>
      
      {/* Route Type Indicator */}
      <Animated.View 
        style={[
          styles.routeTypeContainer,
          {
            opacity: fadeAnim,
            transform: [{ translateY: slideAnim }]
          }
        ]}
      >
        <View style={styles.routeTypeIndicator}>
          <MaterialIcons 
            name={routeType === 'gps' ? 'gps-fixed' : 'place'} 
            size={20} 
            color="#4CAF50" 
          />
          <Text style={styles.routeTypeText}>
            {routeType === 'gps' ? 'GPS Optimized Route' : 'Location-Based Route'}
          </Text>
        </View>
        
        <View style={styles.routeStats}>
          <View style={styles.statItem}>
            <MaterialCommunityIcons name="leaf" size={16} color="#4CAF50" />
            <Text style={styles.statText}>{routeData?.totalPlants || 0}</Text>
          </View>
          
          <View style={styles.statItem}>
            <MaterialIcons name="schedule" size={16} color="#FF9800" />
            <Text style={styles.statText}>{routeData?.estimatedTime?.minutes || 0}m</Text>
          </View>
        </View>
      </Animated.View>
      
      {/* Route Steps */}
      <ScrollView 
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        <Animated.View 
          style={[
            styles.content,
            {
              opacity: fadeAnim,
              transform: [{ scale: scaleAnim }]
            }
          ]}
        >
          <Text style={styles.sectionTitle}>Watering Sequence</Text>
          
          {selectedRoute && selectedRoute.map((plant, index) => (
            <View key={plant.id} style={styles.routeStep}>
              <View style={styles.stepIndicator}>
                <View style={styles.stepNumber}>
                  <Text style={styles.stepNumberText}>{index + 1}</Text>
                </View>
                {index < selectedRoute.length - 1 && (
                  <View style={styles.stepConnector} />
                )}
              </View>
              
              <View style={styles.stepContent}>
                <View style={styles.plantInfo}>
                  <Text style={styles.plantName}>{plant.name}</Text>
                  
                  {plant.location && (
                    <View style={styles.locationInfo}>
                      <MaterialIcons name="place" size={14} color="#666" />
                      <Text style={styles.locationText}>
                        {[
                          plant.location.section && `Section ${plant.location.section}`,
                          plant.location.aisle && `Aisle ${plant.location.aisle}`,
                          plant.location.shelfNumber && `Shelf ${plant.location.shelfNumber}`
                        ].filter(Boolean).join(', ') || 'Location not specified'}
                      </Text>
                    </View>
                  )}
                  
                  {plant.location?.gpsCoordinates && (
                    <View style={styles.gpsInfo}>
                      <MaterialIcons name="gps-fixed" size={14} color="#4CAF50" />
                      <Text style={styles.gpsText}>
                        GPS: {plant.location.gpsCoordinates.latitude?.toFixed(6)}, {plant.location.gpsCoordinates.longitude?.toFixed(6)}
                      </Text>
                    </View>
                  )}
                </View>
                
                <TouchableOpacity 
                  style={styles.plantAction}
                  onPress={() => {
                    Alert.alert(
                      'Plant Details',
                      `${plant.name}\n\nLocation: ${plant.location ? 
                        [
                          plant.location.section && `Section ${plant.location.section}`,
                          plant.location.aisle && `Aisle ${plant.location.aisle}`,
                          plant.location.shelfNumber && `Shelf ${plant.location.shelfNumber}`
                        ].filter(Boolean).join(', ') : 
                        'Not specified'
                      }`,
                      [{ text: 'OK' }]
                    );
                  }}
                >
                  <MaterialIcons name="info" size={20} color="#666" />
                </TouchableOpacity>
              </View>
            </View>
          ))}
          
          {/* Route Summary */}
          <View style={styles.routeSummary}>
            <Text style={styles.summaryTitle}>Route Summary</Text>
            
            <View style={styles.summaryStats}>
              <View style={styles.summaryItem}>
                <MaterialCommunityIcons name="leaf" size={24} color="#4CAF50" />
                <View style={styles.summaryDetails}>
                  <Text style={styles.summaryValue}>{routeData?.totalPlants || 0}</Text>
                  <Text style={styles.summaryLabel}>Plants to Water</Text>
                </View>
              </View>
              
              <View style={styles.summaryItem}>
                <MaterialIcons name="schedule" size={24} color="#FF9800" />
                <View style={styles.summaryDetails}>
                  <Text style={styles.summaryValue}>{routeData?.estimatedTime?.minutes || 0}</Text>
                  <Text style={styles.summaryLabel}>Minutes</Text>
                </View>
              </View>
              
              <View style={styles.summaryItem}>
                <MaterialIcons name="route" size={24} color="#2196F3" />
                <View style={styles.summaryDetails}>
                  <Text style={styles.summaryValue}>
                    {routeType === 'gps' ? 'GPS' : 'Manual'}
                  </Text>
                  <Text style={styles.summaryLabel}>Route Type</Text>
                </View>
              </View>
            </View>
          </View>
          
          {/* Tips Section */}
          <View style={styles.tipsSection}>
            <Text style={styles.tipsTitle}>💡 Watering Tips</Text>
            
            <View style={styles.tip}>
              <MaterialCommunityIcons name="clock-outline" size={16} color="#4CAF50" />
              <Text style={styles.tipText}>
                Follow the sequence for optimal efficiency
              </Text>
            </View>
            
            <View style={styles.tip}>
              <MaterialCommunityIcons name="water" size={16} color="#2196F3" />
              <Text style={styles.tipText}>
                Check soil moisture before watering each plant
              </Text>
            </View>
            
            <View style={styles.tip}>
              <MaterialCommunityIcons name="barcode-scan" size={16} color="#FF9800" />
              <Text style={styles.tipText}>
                Scan plant barcodes to mark as watered
              </Text>
            </View>
          </View>
        </Animated.View>
      </ScrollView>
      
      {/* Action Buttons */}
      <Animated.View 
        style={[
          styles.actionContainer,
          {
            opacity: fadeAnim,
            transform: [{ translateY: slideAnim }]
          }
        ]}
      >
        <TouchableOpacity 
          style={styles.refreshRouteButton}
          onPress={handleRefresh}
        >
          <MaterialIcons name="refresh" size={20} color="#4CAF50" />
          <Text style={styles.refreshRouteText}>Refresh Route</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.startNavigationButton}
          onPress={handleStartNavigation}
        >
          <MaterialIcons name="navigation" size={20} color="#fff" />
          <Text style={styles.startNavigationText}>Start Navigation</Text>
        </TouchableOpacity>
      </Animated.View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 18,
    fontWeight: '600',
    color: '#4CAF50',
  },
  loadingSubtext: {
    marginTop: 8,
    fontSize: 14,
    color: '#666',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#f44336',
    marginTop: 16,
    marginBottom: 8,
  },
  errorText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 24,
  },
  retryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f44336',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#fff',
    fontWeight: '600',
    marginLeft: 8,
  },
  header: {
    backgroundColor: '#4CAF50',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  backButton: {
    padding: 8,
  },
  headerContent: {
    flex: 1,
    marginLeft: 16,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  headerSubtitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.8)',
  },
  shareButton: {
    padding: 8,
  },
  routeTypeContainer: {
    backgroundColor: '#fff',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  routeTypeIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  routeTypeText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginLeft: 8,
  },
  routeStats: {
    flexDirection: 'row',
    gap: 16,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  statText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 16,
  },
  routeStep: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  stepIndicator: {
    alignItems: 'center',
    marginRight: 16,
  },
  stepNumber: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  stepNumberText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  stepConnector: {
    width: 2,
    height: 40,
    backgroundColor: '#e0e0e0',
    marginTop: 8,
  },
  stepContent: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    flexDirection: 'row',
    alignItems: 'center',
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  plantInfo: {
    flex: 1,
  },
  plantName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  locationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 2,
  },
  locationText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 4,
  },
  gpsInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  gpsText: {
    fontSize: 12,
    color: '#4CAF50',
    marginLeft: 4,
  },
  plantAction: {
    padding: 8,
  },
  routeSummary: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginTop: 24,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 16,
  },
  summaryStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  summaryItem: {
    alignItems: 'center',
  },
  summaryDetails: {
    alignItems: 'center',
    marginTop: 8,
  },
  summaryValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  summaryLabel: {
    fontSize: 12,
    color: '#666',
    marginTop: 2,
  },
  tipsSection: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginTop: 16,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  tipsTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  tip: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  tipText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
    flex: 1,
  },
  actionContainer: {
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    gap: 12,
  },
  refreshRouteButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#f0f9f3',
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  refreshRouteText: {
    color: '#4CAF50',
    fontWeight: '600',
    marginLeft: 8,
  },
  startNavigationButton: {
    flex: 2,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#4CAF50',
    paddingVertical: 12,
    borderRadius: 8,
  },
  startNavigationText: {
    color: '#fff',
    fontWeight: '600',
    marginLeft: 8,
  },
});